#!/usr/bin/env node

/**
 * üîí PARITY ASSERTION SCRIPT
 * 
 * Tento skript zabezpeƒçuje, ≈æe produkcia bude 1:1 s localhost
 * Sp√∫≈°≈•a sa pred ka≈æd√Ωm buildom
 */

const fs = require('fs');
const path = require('path');

// Load .env.production if exists
require('dotenv').config({ path: '.env.production' });

console.log('üîç Kontrola parity localhost ‚Üî production...\n');

// 1. Kontrola NODE_ENV
const allowed = ['development', 'test', 'production'];

// umo≈æni doƒçasne vypn√∫≈• parity (napr. pri hotfixe)
if (process.env.PARITY_SKIP === '1') {
  console.log('[parity] SKIPPED via PARITY_SKIP=1');
  process.exit(0);
}

const raw = String(process.env.NODE_ENV ?? '').trim().toLowerCase();

if (!allowed.includes(raw)) {
  console.error(
    `[parity] ‚ùå NODE_ENV m√° neplatn√∫ hodnotu: '${process.env.NODE_ENV}'. ` +
    `Povolen√©: ${allowed.join(', ')}`
  );
  process.exit(1);
}

// Voliteƒæn√Ω "prod guard" ‚Äì len ak chce≈° striktne vy≈æadova≈• production pri builde na serveri
if (process.env.FORCE_PROD === '1' && raw !== 'production') {
  console.error(`[parity] ‚ùå Oƒçak√°vam NODE_ENV=production, ale je '${raw}'.`);
  process.exit(1);
}

console.log(`[parity] ‚úÖ NODE_ENV='${raw}' vyzer√° OK.`);

// 2. Kontrola DATABASE_URL
const dbUrl = process.env.DATABASE_URL;
if (!dbUrl) {
  console.error('‚ùå DATABASE_URL nie je nastaven√©');
  process.exit(1);
}

// V produkcii aj localhost pou≈æ√≠vame rovnak√Ω n√°zov s√∫boru (dev.db)
if (dbUrl.includes('dev.db')) {
  console.log('‚úÖ DATABASE_URL pou≈æ√≠va dev.db (1:1 parity)');
} else {
  console.error('‚ùå DATABASE_URL mus√≠ pou≈æ√≠va≈• dev.db pre parity:', dbUrl);
  process.exit(1);
}

// 3. Kontrola NEXT_PUBLIC_APP_URL
const appUrl = process.env.NEXT_PUBLIC_APP_URL;
if (!appUrl) {
  console.error('‚ùå NEXT_PUBLIC_APP_URL nie je nastaven√©');
  process.exit(1);
}

if (raw === 'development' && appUrl.includes('localhost:3000')) {
  console.log('‚úÖ NEXT_PUBLIC_APP_URL spr√°vne pre localhost:', appUrl);
} else if (raw === 'production' && !appUrl.includes('localhost')) {
  console.log('‚úÖ NEXT_PUBLIC_APP_URL spr√°vne pre produkciu:', appUrl);
} else {
  console.error('‚ùå NEXT_PUBLIC_APP_URL nesed√≠ s NODE_ENV:', appUrl);
  process.exit(1);
}

// 4. Kontrola package-lock.json (zmeny bez bumpu)
const lockPath = path.join(process.cwd(), 'package-lock.json');
if (fs.existsSync(lockPath)) {
  const lockContent = fs.readFileSync(lockPath, 'utf8');
  const lockHash = require('crypto').createHash('md5').update(lockContent).digest('hex');
  console.log('‚úÖ package-lock.json hash:', lockHash.substring(0, 8) + '...');
} else {
  console.log('‚ö†Ô∏è  package-lock.json neexistuje (pou≈æ√≠va sa yarn/pnpm?)');
}

// 5. Kontrola API kƒæ√∫ƒçov
const polygonKey = process.env.POLYGON_API_KEY;
const finnhubKey = process.env.FINNHUB_API_KEY;

if (!polygonKey) {
  console.error('‚ùå POLYGON_API_KEY nie je nastaven√©');
  process.exit(1);
}

if (!finnhubKey) {
  console.error('‚ùå FINNHUB_API_KEY nie je nastaven√©');
  process.exit(1);
}

console.log('‚úÖ API kƒæ√∫ƒçe s√∫ nastaven√©');

// 6. Kontrola tsconfig.json path aliasov
const tsconfigPath = path.join(process.cwd(), 'tsconfig.json');
if (fs.existsSync(tsconfigPath)) {
  const tsconfig = JSON.parse(fs.readFileSync(tsconfigPath, 'utf8'));
  const paths = tsconfig.compilerOptions?.paths;
  
  if (paths && paths['@/*']) {
    console.log('‚úÖ TypeScript path aliasy s√∫ nastaven√©');
  } else {
    console.error('‚ùå TypeScript path aliasy ch√Ωbaj√∫');
    process.exit(1);
  }
}

console.log('\nüéØ V≈°etky parity kontroly pre≈°li √∫spe≈°ne!');
console.log('‚úÖ Build m√¥≈æe pokraƒçova≈•...\n');
