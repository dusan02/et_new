name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          timeout: 600s
          command_timeout: 40m
          debug: true
          script: |
            echo "üöÄ Starting deployment..."
            echo "Current directory: $(pwd)"
            echo "User: $(whoami)"
            echo "Date: $(date)"
            
            # Update system and install required tools
            echo "üîß Installing system dependencies..."
            apt-get update -y
            apt-get install -y git curl wget
            
            # Install Node.js 18.x
            echo "üì¶ Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt-get install -y nodejs
            
            # Verify installations
            echo "‚úÖ Verifying installations:"
            git --version
            node --version
            npm --version
            
            # Create project directory if it doesn't exist
            echo "üìÅ Setting up project directory..."
            mkdir -p /var/www/earnings-table
            cd /var/www/earnings-table
            echo "üìÅ Project directory: $(pwd)"

            # Clone repository if it doesn't exist
            if [ ! -d ".git" ]; then
                echo "üì• Cloning repository..."
                git clone https://github.com/dusan02/et_new.git .
            else
                echo "üìã Git status:"
                git status --short
                # Force reset to match remote exactly
                echo "üßπ Force resetting to remote state..."
                git fetch origin main
                git reset --hard origin/main
                git clean -fd
            fi

            # Show current commit
            echo "üìù Current commit:"
            git log --oneline -1

            # Clean and install dependencies
            echo "üßπ Cleaning node_modules..."
            rm -rf node_modules
            rm -rf .next
            npm cache clean --force
            
            echo "üì¶ Installing dependencies..."
            npm install --production=false
            
            # Set environment variables for production build
            echo "üîß Setting environment variables..."
            export NODE_ENV=production
            export NEXT_PUBLIC_APP_ENV=production
            export DATABASE_URL="file:./dev.db"
            export REDIS_URL="redis://localhost:6379"
            export PARITY_SKIP=1  # Skip parity checks
            
            # Set required API keys for build (using dummy values for build)
            export FINNHUB_API_KEY="dummy_key_for_build"
            export POLYGON_API_KEY="dummy_key_for_build"
            
          # Build the application using optimized production script
          echo "üèóÔ∏è Building application with optimized script..."
          npm run build:production

            # Create logs directory
            mkdir -p logs

            # Stop any existing processes (pidfile-safe, no pkill!)
            echo "üõë Stopping existing processes safely..."
            if [ -f app.pid ] && kill -0 "$(cat app.pid)" 2>/dev/null; then
                echo "Stopping process with PID: $(cat app.pid)"
                kill -TERM "$(cat app.pid)" || true
                sleep 2
                # Force kill if still running
                kill -KILL "$(cat app.pid)" 2>/dev/null || true
            else
                echo "No existing process found or PID file missing"
            fi
            rm -f app.pid

            # Start the application with pidfile
            echo "‚ñ∂Ô∏è Starting application..."
            echo "Current working directory: $(pwd)"
            echo "Checking if .next directory exists: $(ls -la .next 2>/dev/null || echo 'No .next directory')"
            
            echo "Starting npm start command with pidfile..."
            nohup env NODE_ENV=production PORT=3000 npm start > logs/app.out 2> logs/app.err < /dev/null & echo $! > app.pid
            APP_PID=$(cat app.pid)
            echo "Application started with PID: $APP_PID"
            
            # Wait a bit longer for startup
            echo "Waiting 10 seconds for application to start..."
            sleep 10

            # Wait and check if process is running
            sleep 5
            echo "üîç Checking if application is running..."
            if ps -p $APP_PID > /dev/null; then
                echo "‚úÖ Application process is running (PID: $APP_PID)"
            else
                echo "‚ùå Application process died, checking logs..."
                echo "Checking if log files exist:"
                ls -la logs/ 2>/dev/null || echo "No logs directory found"
                if [ -f "logs/app.out" ]; then
                    echo "Last 30 lines of app.out:"
                    tail -30 logs/app.out
                fi
                if [ -f "logs/app.err" ]; then
                    echo "Last 30 lines of app.err:"
                    tail -30 logs/app.err
                fi
                echo "Checking if PID file exists: $(ls -la app.pid 2>/dev/null || echo 'No PID file found')"
                exit 1
            fi

            # Quick health check
            echo "üè• Health check..."
            sleep 5
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
                echo "‚úÖ Deployment successful!"
            else
                echo "‚ö†Ô∏è Health check failed - checking logs..."
                if [ -f "logs/app.out" ]; then
                    echo "Last 20 lines of app.out:"
                    tail -20 logs/app.out
                fi
                if [ -f "logs/app.err" ]; then
                    echo "Last 20 lines of app.err:"
                    tail -20 logs/app.err
                fi
            fi

            echo "üéâ Deployment completed!"

      - name: Health check (SSL disabled)
        run: |
          sleep 30
          echo "Checking HTTP connection..."
          curl -f http://${{ secrets.HOST }} || echo "HTTP check failed"
          echo "Checking HTTPS connection (SSL verification disabled)..."
          curl -k -f https://${{ secrets.HOST }} || echo "HTTPS check failed - SSL certificate issue"
          echo "Health check completed (SSL verification disabled)"
