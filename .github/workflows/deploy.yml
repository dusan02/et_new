name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          timeout: 600s
          command_timeout: 40m
          debug: true
          script: |
            echo "üöÄ Starting deployment..."
            echo "Current directory: $(pwd)"
            echo "User: $(whoami)"
            echo "Date: $(date)"
            
            # Update system and install required tools
            echo "üîß Installing system dependencies..."
            apt-get update -y
            apt-get install -y git curl wget
            
            # Install Node.js 18.x
            echo "üì¶ Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
            apt-get install -y nodejs
            
            # Verify installations
            echo "‚úÖ Verifying installations:"
            git --version
            node --version
            npm --version
            
            # Create project directory if it doesn't exist
            echo "üìÅ Setting up project directory..."
            mkdir -p /var/www/earnings-table
            cd /var/www/earnings-table
            echo "üìÅ Project directory: $(pwd)"

            # Clone repository if it doesn't exist
            if [ ! -d ".git" ]; then
                echo "üì• Cloning repository..."
                git clone https://github.com/dusan02/et_new.git .
            else
                echo "üìã Git status:"
                git status --short
                # Force reset to match remote exactly
                echo "üßπ Force resetting to remote state..."
                git fetch origin main
                git reset --hard origin/main
                git clean -fd
            fi

            # Show current commit
            echo "üìù Current commit:"
            git log --oneline -1

            # Clean and install dependencies
            echo "üßπ Cleaning node_modules..."
            rm -rf node_modules
            rm -rf .next
            npm cache clean --force
            
            echo "üì¶ Installing dependencies..."
            npm install --production=false
            
            # Set environment variables for production build
            echo "üîß Setting environment variables..."
            export NODE_ENV=production
            export NEXT_PUBLIC_APP_ENV=production
            export DATABASE_URL="file:./dev.db"
            export REDIS_URL="redis://localhost:6379"
            export PARITY_SKIP=1  # Skip parity checks
            
            # Set required API keys for build (using dummy values for build)
            export FINNHUB_API_KEY="dummy_key_for_build"
            export POLYGON_API_KEY="dummy_key_for_build"
            
            # Build the application using optimized production script
            echo "üèóÔ∏è Building application with optimized script..."
            npm run build:production

            # Create logs directory
            mkdir -p logs

            # Stop any existing processes (pidfile-safe, no pkill!)
            echo "üõë Stopping existing processes safely..."
            if [ -f app.pid ] && kill -0 "$(cat app.pid)" 2>/dev/null; then
                echo "Stopping process with PID: $(cat app.pid)"
                kill -TERM "$(cat app.pid)" || true
                sleep 2
                # Force kill if still running
                kill -KILL "$(cat app.pid)" 2>/dev/null || true
            else
                echo "No existing process found or PID file missing"
            fi
            rm -f app.pid
            
            # Install lsof if not available
            echo "üîß Ensuring lsof is available..."
            apt-get install -y lsof || echo "lsof installation failed, trying alternative methods"
            
            # Kill any processes using port 3001 with multiple methods
            echo "üîç Checking for processes using port 3001..."
            
            # Method 1: Using lsof
            PORT_PID=$(lsof -ti:3001 2>/dev/null || true)
            if [ ! -z "$PORT_PID" ]; then
                echo "Found process $PORT_PID using port 3001 (lsof), killing it..."
                kill -TERM $PORT_PID 2>/dev/null || true
                sleep 3
                kill -KILL $PORT_PID 2>/dev/null || true
            fi
            
            # Method 2: Using netstat and fuser as backup
            echo "üîç Checking with netstat..."
            NETSTAT_PID=$(netstat -tlnp 2>/dev/null | grep :3001 | awk '{print $7}' | cut -d'/' -f1 | head -1 || true)
            if [ ! -z "$NETSTAT_PID" ] && [ "$NETSTAT_PID" != "-" ]; then
                echo "Found process $NETSTAT_PID using port 3001 (netstat), killing it..."
                kill -TERM $NETSTAT_PID 2>/dev/null || true
                sleep 3
                kill -KILL $NETSTAT_PID 2>/dev/null || true
            fi
            
            # Method 3: Using fuser as final backup
            echo "üîç Checking with fuser..."
            fuser -k 3001/tcp 2>/dev/null || true
            
            # Method 4: Kill any node processes that might be hanging
            echo "üîç Killing any hanging node processes..."
            pkill -f "node.*next.*start" 2>/dev/null || true
            pkill -f "npm.*start" 2>/dev/null || true
            
            # Wait a bit for processes to fully terminate
            echo "‚è≥ Waiting for processes to terminate..."
            sleep 5
            
            # Final check
            FINAL_CHECK=$(lsof -ti:3001 2>/dev/null || netstat -tlnp 2>/dev/null | grep :3001 || true)
            if [ ! -z "$FINAL_CHECK" ]; then
                echo "‚ö†Ô∏è Warning: Port 3001 still appears to be in use:"
                echo "$FINAL_CHECK"
                echo "Attempting force kill..."
                fuser -k 3001/tcp 2>/dev/null || true
                sleep 2
            else
                echo "‚úÖ Port 3001 is now free"
            fi

            # Start the application with pidfile and retry logic
            echo "‚ñ∂Ô∏è Starting application..."
            echo "Current working directory: $(pwd)"
            echo "Checking if .next directory exists: $(ls -la .next 2>/dev/null || echo 'No .next directory')"
            
            # Try starting the application up to 3 times
            for attempt in 1 2 3; do
                echo "üöÄ Starting attempt $attempt/3..."
                
                # Clear any existing PID file
                rm -f app.pid
                
                # Start the application
                echo "Starting npm start command with pidfile..."
                nohup env NODE_ENV=production PORT=3001 npm start > logs/app.out 2> logs/app.err < /dev/null & echo $! > app.pid
                
                # Wait a moment for the process to start
                sleep 3
                
                # Check if PID file was created and contains a valid PID
                if [ -f app.pid ] && [ -s app.pid ]; then
                    APP_PID=$(cat app.pid)
                    echo "Application started with PID: $APP_PID"
                    
                    # Wait for startup
                    echo "Waiting 8 seconds for application to start..."
                    sleep 8
                    
                    # Check if process is still running
                    if ps -p $APP_PID > /dev/null 2>&1; then
                        echo "‚úÖ Application process is running (PID: $APP_PID)"
                        break
                    else
                        echo "‚ùå Application process died on attempt $attempt, checking logs..."
                        if [ -f "logs/app.err" ]; then
                            echo "Last 20 lines of app.err:"
                            tail -20 logs/app.err
                        fi
                        
                        if [ $attempt -lt 3 ]; then
                            echo "üîÑ Retrying in 5 seconds..."
                            sleep 5
                        else
                            echo "‚ùå All startup attempts failed"
                            exit 1
                        fi
                    fi
                else
                    echo "‚ùå Failed to create PID file on attempt $attempt"
                    if [ $attempt -lt 3 ]; then
                        echo "üîÑ Retrying in 5 seconds..."
                        sleep 5
                    else
                        echo "‚ùå All startup attempts failed - no PID file created"
                        exit 1
                    fi
                fi
            done

            # Comprehensive health check with retries
            echo "üè• Health check..."
            sleep 5
            
            # Try health check up to 3 times
            HEALTH_CHECK_PASSED=false
            for health_attempt in 1 2 3; do
                echo "üè• Health check attempt $health_attempt/3..."
                
                if curl -f http://localhost:3001 > /dev/null 2>&1; then
                    echo "‚úÖ Health check passed!"
                    HEALTH_CHECK_PASSED=true
                    break
                else
                    echo "‚ö†Ô∏è Health check attempt $health_attempt failed"
                    if [ $health_attempt -lt 3 ]; then
                        echo "üîÑ Retrying health check in 5 seconds..."
                        sleep 5
                    fi
                fi
            done
            
            if [ "$HEALTH_CHECK_PASSED" = false ]; then
                echo "‚ùå All health checks failed - checking logs..."
                echo "Checking if log files exist:"
                ls -la logs/ 2>/dev/null || echo "No logs directory found"
                
                if [ -f "logs/app.out" ]; then
                    echo "Last 30 lines of app.out:"
                    tail -30 logs/app.out
                fi
                if [ -f "logs/app.err" ]; then
                    echo "Last 30 lines of app.err:"
                    tail -30 logs/app.err
                fi
                
                # Check if process is still running
                if [ -f app.pid ]; then
                    APP_PID=$(cat app.pid)
                    if ps -p $APP_PID > /dev/null 2>&1; then
                        echo "‚ö†Ô∏è Process is running but not responding to HTTP requests"
                    else
                        echo "‚ùå Process is not running"
                    fi
                fi
                
                echo "‚ö†Ô∏è Deployment completed but health check failed"
            else
                echo "‚úÖ Deployment successful!"
            fi

            echo "üéâ Deployment completed!"

      - name: Health check (SSL disabled)
        run: |
          sleep 30
          echo "Checking HTTP connection..."
          curl -f http://${{ secrets.HOST }} || echo "HTTP check failed"
          echo "Checking HTTPS connection (SSL verification disabled)..."
          curl -k -f https://${{ secrets.HOST }} || echo "HTTPS check failed - SSL certificate issue"
          echo "Health check completed (SSL verification disabled)"
