name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    # Cancel previous runs if new one starts
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          timeout: 300s
          command_timeout: 15m
          debug: true
          retry: 2
          retry_interval: 5s
          retry_timeout: 15s
          # Force cancel on timeout
          force_kill: true
          script: |
            set -e  # Exit on any error
            echo "üöÄ Starting deployment..."
            echo "Current directory: $(pwd)"
            echo "User: $(whoami)"
            echo "Date: $(date)"
            echo "SSH connection established successfully"

            # Update system and install required tools
            echo "üîß Installing system dependencies..."
            apt-get update -y || { echo "‚ùå apt-get update failed"; exit 1; }
            apt-get install -y git curl wget || { echo "‚ùå Package installation failed"; exit 1; }

            # Install Node.js 18.x
            echo "üì¶ Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | bash - || { echo "‚ùå Node.js setup failed"; exit 1; }
            apt-get install -y nodejs || { echo "‚ùå Node.js installation failed"; exit 1; }

            # Verify installations
            echo "‚úÖ Verifying installations:"
            git --version
            node --version
            npm --version

            # Create project directory if it doesn't exist
            echo "üìÅ Setting up project directory..."
            mkdir -p /var/www/earnings-table
            cd /var/www/earnings-table
            echo "üìÅ Project directory: $(pwd)"

            # Clone repository if it doesn't exist
            if [ ! -d ".git" ]; then
                echo "üì• Cloning repository..."
                git clone https://github.com/dusan02/et_new.git . || { echo "‚ùå Git clone failed"; exit 1; }
            else
                echo "üìã Git status:"
                git status --short
                # Force reset to match remote exactly
                echo "üßπ Force resetting to remote state..."
                git fetch origin main || { echo "‚ùå Git fetch failed"; exit 1; }
                git reset --hard origin/main || { echo "‚ùå Git reset failed"; exit 1; }
                git clean -fd || { echo "‚ùå Git clean failed"; exit 1; }
            fi

            # Show current commit
            echo "üìù Current commit:"
            git log --oneline -1

            # Clean and install dependencies (optimized)
            echo "üßπ Cleaning node_modules..."
            rm -rf node_modules
            rm -rf .next

            echo "üì¶ Installing dependencies (optimized with timeout)..."
            echo "Starting npm ci with 5 minute timeout..."
            # Use npm ci for faster, reliable installs with timeout
            timeout 300 npm ci --production=false --prefer-offline --no-audit --no-fund || {
                echo "‚ö†Ô∏è npm ci timed out after 5 minutes, trying npm install..."
                echo "Starting npm install with 3 minute timeout..."
                timeout 180 npm install --production=false --no-audit --no-fund || {
                    echo "‚ùå All dependency installation attempts failed"
                    echo "This usually indicates network issues or package conflicts"
                    exit 1
                }
            }
            echo "‚úÖ Dependencies installed successfully"

            # Set environment variables for production build
            echo "üîß Setting environment variables..."
            export NODE_ENV=production
            export NEXT_PUBLIC_APP_ENV=production
            export DATABASE_URL="file:./dev.db"
            export REDIS_URL="redis://localhost:6379"
            export PARITY_SKIP=1  # Skip parity checks

            # Set required API keys for build (using dummy values for build)
            export FINNHUB_API_KEY="dummy_key_for_build"
            export POLYGON_API_KEY="dummy_key_for_build"

            # Build the application using optimized production script with timeout
            echo "üèóÔ∏è Building application with optimized script..."
            timeout 300 npm run build:production || {
                echo "‚ö†Ô∏è Production build timed out, trying direct Next.js build..."
                timeout 180 npx next build || {
                    echo "‚ùå All build attempts failed"
                    exit 1
                }
            }

            # Create logs directory
            mkdir -p logs

            # Stop any existing processes (pidfile-safe, no pkill!)
            echo "üõë Stopping existing processes safely..."

            # Check for any running deployment processes
            echo "üîç Checking for running deployment processes..."
            DEPLOYMENT_PIDS=$(ps aux | grep -E "(npm|node|next)" | grep -v grep | awk '{print $2}' || true)
            if [ -n "$DEPLOYMENT_PIDS" ]; then
                echo "Found running Node.js processes: $DEPLOYMENT_PIDS"
                echo "Stopping all Node.js processes..."
                echo "$DEPLOYMENT_PIDS" | xargs kill -TERM 2>/dev/null || true
                sleep 3
                echo "$DEPLOYMENT_PIDS" | xargs kill -KILL 2>/dev/null || true
            fi

            # Stop app.pid process if exists
            if [ -f app.pid ] && kill -0 "$(cat app.pid)" 2>/dev/null; then
                echo "Stopping process with PID: $(cat app.pid)"
                kill -TERM "$(cat app.pid)" || true
                sleep 2
                # Force kill if still running
                kill -KILL "$(cat app.pid)" 2>/dev/null || true
            else
                echo "No existing process found or PID file missing"
            fi
            rm -f app.pid

            # Install lsof if not available and safe port cleanup
            echo "üõë Installing lsof and safe port cleanup..."
            apt-get install -y lsof || true

            # Check for any hanging SSH connections
            echo "üîç Checking for hanging SSH connections..."
            SSH_CONNECTIONS=$(who | grep -E "(pts|tty)" | wc -l || true)
            echo "Current SSH connections: $SSH_CONNECTIONS"

            # Multiple methods to find and kill processes on port 3001
            echo "Finding processes on port 3001..."

            # Method 1: lsof
            PORT_PIDS=$(lsof -ti:3001 2>/dev/null || true)
            if [ -n "$PORT_PIDS" ]; then
                echo "Method 1 (lsof): Found processes on port 3001: $PORT_PIDS"
                echo "$PORT_PIDS" | xargs kill -TERM 2>/dev/null || true
                sleep 2
                echo "$PORT_PIDS" | xargs kill -KILL 2>/dev/null || true
            fi

            # Method 2: netstat + ps
            NETSTAT_PIDS=$(netstat -tlnp 2>/dev/null | grep :3001 | awk '{print $7}' | cut -d'/' -f1 | grep -v '-' || true)
            if [ -n "$NETSTAT_PIDS" ]; then
                echo "Method 2 (netstat): Found processes on port 3001: $NETSTAT_PIDS"
                echo "$NETSTAT_PIDS" | xargs kill -TERM 2>/dev/null || true
                sleep 2
                echo "$NETSTAT_PIDS" | xargs kill -KILL 2>/dev/null || true
            fi

            # Method 3: fuser (more aggressive but targeted)
            echo "Method 3 (fuser): Killing processes on port 3001..."
            fuser -k 3001/tcp 2>/dev/null || true

            sleep 3

            # Verify port is free
            echo "üîç Verifying port 3001 is free..."
            FINAL_CHECK=$(lsof -ti:3001 2>/dev/null || true)
            if [ -n "$FINAL_CHECK" ]; then
                echo "‚ö†Ô∏è Warning: Port 3001 still in use by: $FINAL_CHECK"
                echo "Attempting final cleanup..."
                echo "$FINAL_CHECK" | xargs kill -KILL 2>/dev/null || true
                sleep 2
            else
                echo "‚úÖ Port 3001 is confirmed free"
            fi

            echo "‚úÖ Port cleanup completed"

            # Start the application
            echo "‚ñ∂Ô∏è Starting application..."
            echo "Current working directory: $(pwd)"
            echo "Checking if .next directory exists: $(ls -la .next 2>/dev/null || echo 'No .next directory')"

            echo "üöÄ Starting application..."
            nohup env NODE_ENV=production PORT=3001 npm start > logs/app.out 2> logs/app.err < /dev/null &
            APP_PID=$!
            echo "Application started with PID: $APP_PID"
            echo "$APP_PID" > app.pid

            # Wait for startup
            echo "Waiting 10 seconds for application to start..."
            sleep 10

            # Check if process is still running
            if ps -p $APP_PID > /dev/null 2>&1; then
                echo "‚úÖ Application process is running (PID: $APP_PID)"
            else
                echo "‚ùå Application process died, checking logs..."
                if [ -f "logs/app.err" ]; then
                    echo "Last 20 lines of app.err:"
                    tail -20 logs/app.err
                fi
                if [ -f "logs/app.out" ]; then
                    echo "Last 20 lines of app.out:"
                    tail -20 logs/app.out
                fi
                echo "‚ùå Deployment failed - application did not start"
                exit 1
            fi

            # Quick health check
            echo "üè• Health check..."
            sleep 5
            if curl -f http://localhost:3001 > /dev/null 2>&1; then
                echo "‚úÖ Deployment successful!"
            else
                echo "‚ö†Ô∏è Health check failed - checking logs..."
                if [ -f "logs/app.err" ]; then
                    echo "Last 20 lines of app.err:"
                    tail -20 logs/app.err
                fi
                if [ -f "logs/app.out" ]; then
                    echo "Last 20 lines of app.out:"
                    tail -20 logs/app.out
                fi
                echo "‚ö†Ô∏è Health check failed but deployment may still be working"
            fi

            echo "üéâ Deployment completed!"

            # Cleanup on success
            echo "üßπ Cleaning up temporary files..."
            rm -f app.pid
            echo "‚úÖ Cleanup completed"

      - name: Health check (SSL disabled)
        run: |
          sleep 30
          echo "Checking HTTP connection..."
          curl -f http://${{ secrets.HOST }} || echo "HTTP check failed"
          echo "Checking HTTPS connection (SSL verification disabled)..."
          curl -k -f https://${{ secrets.HOST }} || echo "HTTPS check failed - SSL certificate issue"
          echo "Health check completed (SSL verification disabled)"

  # Post-deploy validation job
  post-deploy-validation:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

      - name: Run API smoke test
        run: |
          # Wait for API to be available
          for i in {1..30}; do
            if curl -f -s http://${{ secrets.HOST }}/api/earnings > /dev/null; then
              echo "API is ready"
              break
            fi
            echo "Waiting for API... ($i/30)"
            sleep 10
          done

          # Run smoke test
          node scripts/api-smoke-test.js

      - name: Health check
        run: |
          HEALTH=$(curl -s http://${{ secrets.HOST }}/api/earnings | jq '
          {
            total: (.data | length),
            status: .status,
            insaneRevenue: ([.data[] | select(.revenueActual != null and .revenueActual > 1e12)] | length),
            missingPrice: ([.data[] | select((.currentPrice != null) and (.previousClose == null))] | length)
          }')

          echo "Health check results:"
          echo $HEALTH | jq .

          # Validate thresholds
          TOTAL=$(echo $HEALTH | jq -r '.total')
          INSANE_REVENUE=$(echo $HEALTH | jq -r '.insaneRevenue')
          MISSING_PRICE=$(echo $HEALTH | jq -r '.missingPrice')

          if [ "$TOTAL" -eq 0 ]; then
            echo "‚ùå No data returned"
            exit 1
          fi

          if [ "$INSANE_REVENUE" -gt 0 ]; then
            echo "‚ùå Found $INSANE_REVENUE records with insane revenue values"
            exit 1
          fi

          if [ "$MISSING_PRICE" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $MISSING_PRICE records with missing price data"
          fi

          echo "‚úÖ Health check passed"

      - name: Performance check
        run: |
          # Check API response time
          RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null http://${{ secrets.HOST }}/api/earnings)
          echo "API response time: ${RESPONSE_TIME}s"

          # Fail if response time > 2 seconds
          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "‚ùå API response time too slow: ${RESPONSE_TIME}s"
            exit 1
          fi

          echo "‚úÖ Performance check passed"
